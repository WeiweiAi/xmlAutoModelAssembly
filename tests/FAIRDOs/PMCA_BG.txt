def model PMCA_BG as
    def import using "./units.cellml" for
        unit fmol using unit fmol;
        unit J_per_mol using unit J_per_mol;
        unit fmol_per_s using unit fmol_per_s;
        unit J_per_K_mol using unit J_per_K_mol;
        unit per_fmol using unit per_fmol;
    enddef;
    def import using "params_BG_PMCA.cellml" for
        comp params_BG_PMCA using comp params_BG_PMCA;
    enddef;
    def comp PMCA_BG as
        var t: second;
        var R: J_per_K_mol{ pub: in};
        var T: kelvin{ pub: in};
        var K_E1: per_fmol{ pub: in};
        var q_init_E1: fmol{ pub: in};
        var K_E1Ca: per_fmol{ pub: in};
        var q_init_E1Ca: fmol{ pub: in};
        var K_E1CaATP: per_fmol{ pub: in};
        var q_init_E1CaATP: fmol{ pub: in};
        var K_E1CaPi: per_fmol{ pub: in};
        var q_init_E1CaPi: fmol{ pub: in};
        var K_E2Pi: per_fmol{ pub: in};
        var q_init_E2Pi: fmol{ pub: in};
        var K_E2: per_fmol{ pub: in};
        var q_init_E2: fmol{ pub: in};
        var K_Cai: per_fmol{ pub: in};
        var q_init_Cai: fmol{ pub: in};
        var K_ATP: per_fmol{ pub: in};
        var q_init_ATP: fmol{ pub: in};
        var K_ADP: per_fmol{ pub: in};
        var q_init_ADP: fmol{ pub: in};
        var K_Pi: per_fmol{ pub: in};
        var q_init_Pi: fmol{ pub: in};
        var K_Cao: per_fmol{ pub: in};
        var q_init_Cao: fmol{ pub: in};
        var kappa_re1: fmol_per_s{ pub: in};
        var kappa_re2: fmol_per_s{ pub: in};
        var kappa_re3: fmol_per_s{ pub: in};
        var kappa_re4: fmol_per_s{ pub: in};
        var kappa_re5: fmol_per_s{ pub: in};
        var kappa_re6: fmol_per_s{ pub: in};
        var mu_E1: J_per_mol;
        var v_E1: fmol_per_s;
        var mu_E1Ca: J_per_mol;
        var v_E1Ca: fmol_per_s;
        var mu_E1CaATP: J_per_mol;
        var v_E1CaATP: fmol_per_s;
        var mu_E1CaPi: J_per_mol;
        var v_E1CaPi: fmol_per_s;
        var mu_E2Pi: J_per_mol;
        var v_E2Pi: fmol_per_s;
        var mu_E2: J_per_mol;
        var v_E2: fmol_per_s;
        var mu_Cai: J_per_mol;
        var v_Cai: fmol_per_s;
        var mu_ATP: J_per_mol;
        var v_ATP: fmol_per_s;
        var mu_ADP: J_per_mol;
        var v_ADP: fmol_per_s;
        var mu_Pi: J_per_mol;
        var v_Pi: fmol_per_s;
        var mu_Cao: J_per_mol;
        var v_Cao: fmol_per_s;
        var A_f_re1: J_per_mol;
        var v_re1: fmol_per_s;
        var A_r_re1: J_per_mol;
        var A_f_re2: J_per_mol;
        var v_re2: fmol_per_s;
        var A_r_re2: J_per_mol;
        var A_f_re3: J_per_mol;
        var v_re3: fmol_per_s;
        var A_r_re3: J_per_mol;
        var A_f_re4: J_per_mol;
        var v_re4: fmol_per_s;
        var A_r_re4: J_per_mol;
        var A_f_re5: J_per_mol;
        var v_re5: fmol_per_s;
        var A_r_re5: J_per_mol;
        var A_f_re6: J_per_mol;
        var v_re6: fmol_per_s;
        var A_r_re6: J_per_mol;
        var q_E1: fmol{ init: q_init_E1};
        var q_E1Ca: fmol{ init: q_init_E1Ca};
        var q_E1CaATP: fmol{ init: q_init_E1CaATP};
        var q_E1CaPi: fmol{ init: q_init_E1CaPi};
        var q_E2Pi: fmol{ init: q_init_E2Pi};
        var q_E2: fmol{ init: q_init_E2};
        var q_Cai: fmol{ init: q_init_Cai};
        var q_ATP: fmol{ init: q_init_ATP};
        var q_ADP: fmol{ init: q_init_ADP};
        var q_Pi: fmol{ init: q_init_Pi};
        var q_Cao: fmol{ init: q_init_Cao};
        mu_E1 = R*T*ln(K_E1*q_E1);
        ode(q_E1,t) = v_E1;
        mu_E1Ca = R*T*ln(K_E1Ca*q_E1Ca);
        ode(q_E1Ca,t) = v_E1Ca;
        mu_E1CaATP = R*T*ln(K_E1CaATP*q_E1CaATP);
        ode(q_E1CaATP,t) = v_E1CaATP;
        mu_E1CaPi = R*T*ln(K_E1CaPi*q_E1CaPi);
        ode(q_E1CaPi,t) = v_E1CaPi;
        mu_E2Pi = R*T*ln(K_E2Pi*q_E2Pi);
        ode(q_E2Pi,t) = v_E2Pi;
        mu_E2 = R*T*ln(K_E2*q_E2);
        ode(q_E2,t) = v_E2;
        mu_Cai = R*T*ln(K_Cai*q_Cai);
        ode(q_Cai,t) = v_Cai;
        mu_ATP = R*T*ln(K_ATP*q_ATP);
        ode(q_ATP,t) = v_ATP;
        mu_ADP = R*T*ln(K_ADP*q_ADP);
        ode(q_ADP,t) = v_ADP;
        mu_Pi = R*T*ln(K_Pi*q_Pi);
        ode(q_Pi,t) = v_Pi;
        mu_Cao = R*T*ln(K_Cao*q_Cao);
        ode(q_Cao,t) = v_Cao;
        v_re1 = kappa_re1*(exp(A_f_re1/(R*T)) - exp(A_r_re1/(R*T)));
        v_re2 = kappa_re2*(exp(A_f_re2/(R*T)) - exp(A_r_re2/(R*T)));
        v_re3 = kappa_re3*(exp(A_f_re3/(R*T)) - exp(A_r_re3/(R*T)));
        v_re4 = kappa_re4*(exp(A_f_re4/(R*T)) - exp(A_r_re4/(R*T)));
        v_re5 = kappa_re5*(exp(A_f_re5/(R*T)) - exp(A_r_re5/(R*T)));
        v_re6 = kappa_re6*(exp(A_f_re6/(R*T)) - exp(A_r_re6/(R*T)));
        v_E1 = -v_re1 +v_re6;
        v_E1Ca = v_re1 -v_re2;
        v_E1CaATP = v_re2 -v_re3;
        v_E1CaPi = v_re3 -v_re4;
        v_E2Pi = v_re4 -v_re5;
        v_E2 = v_re5 -v_re6;
        v_Cai = -v_re1;
        v_ATP = -v_re2;
        v_ADP = v_re3;
        v_Pi = v_re5;
        v_Cao = v_re4;
        A_f_re1 = mu_E1 +mu_Cai;
        A_r_re1 = mu_E1Ca;
        A_f_re2 = mu_E1Ca +mu_ATP;
        A_r_re2 = mu_E1CaATP;
        A_f_re3 = mu_E1CaATP;
        A_r_re3 = mu_E1CaPi +mu_ADP;
        A_f_re4 = mu_E1CaPi;
        A_r_re4 = mu_E2Pi +mu_Cao;
        A_f_re5 = mu_E2Pi;
        A_r_re5 = mu_E2 +mu_Pi;
        A_f_re6 = mu_E2;
        A_r_re6 = mu_E1;
    enddef;
    def map between params_BG_PMCA and PMCA_BG for
        vars R and R;
        vars T and T;
        vars K_E1 and K_E1;
        vars q_init_E1 and q_init_E1;
        vars K_E1Ca and K_E1Ca;
        vars q_init_E1Ca and q_init_E1Ca;
        vars K_E1CaATP and K_E1CaATP;
        vars q_init_E1CaATP and q_init_E1CaATP;
        vars K_E1CaPi and K_E1CaPi;
        vars q_init_E1CaPi and q_init_E1CaPi;
        vars K_E2Pi and K_E2Pi;
        vars q_init_E2Pi and q_init_E2Pi;
        vars K_E2 and K_E2;
        vars q_init_E2 and q_init_E2;
        vars K_Cai and K_Cai;
        vars q_init_Cai and q_init_Cai;
        vars K_ATP and K_ATP;
        vars q_init_ATP and q_init_ATP;
        vars K_ADP and K_ADP;
        vars q_init_ADP and q_init_ADP;
        vars K_Pi and K_Pi;
        vars q_init_Pi and q_init_Pi;
        vars K_Cao and K_Cao;
        vars q_init_Cao and q_init_Cao;
        vars kappa_re1 and kappa_re1;
        vars kappa_re2 and kappa_re2;
        vars kappa_re3 and kappa_re3;
        vars kappa_re4 and kappa_re4;
        vars kappa_re5 and kappa_re5;
        vars kappa_re6 and kappa_re6;
    enddef;
enddef;
